// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/flaki-service/pkg/health (interfaces: RedisClient)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// RedisClient is a mock of RedisClient interface
type RedisClient struct {
	ctrl     *gomock.Controller
	recorder *RedisClientMockRecorder
}

// RedisClientMockRecorder is the mock recorder for RedisClient
type RedisClientMockRecorder struct {
	mock *RedisClient
}

// NewRedisClient creates a new mock instance
func NewRedisClient(ctrl *gomock.Controller) *RedisClient {
	mock := &RedisClient{ctrl: ctrl}
	mock.recorder = &RedisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *RedisClient) EXPECT() *RedisClientMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *RedisClient) Do(arg0 string, arg1 ...interface{}) (interface{}, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *RedisClientMockRecorder) Do(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*RedisClient)(nil).Do), varargs...)
}
